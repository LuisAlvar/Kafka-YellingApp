/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package yellingapp;

import java.util.Properties;

import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.Produced;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import clients.producer.MockDataProducer;

public class App {

    private static final Logger Log = LoggerFactory.getLogger(App.class);

    public static void main(String[] args) {
        new App().Run();
    }

    public void Run() {
        
        // Missing component :: genearting data to push to the producer. 
        // Copied the book due to not knowing much about Java and what are the popular library for data generate, if any. 
        MockDataProducer.produceRandomTextData();

        Properties props = new Properties();
        props.put(StreamsConfig.APPLICATION_ID_CONFIG, "yelling_app_id");
        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");

        StreamsConfig strmConfig = new StreamsConfig(props);
        Serde<String> strSerde = Serdes.String();
        StreamsBuilder builder = new StreamsBuilder();

        // Creating the source node or the parent node - response for consuming the records from Topic
        KStream<String, String> simpleFirstStream = builder.stream("src-topic", Consumed.with(strSerde, strSerde));

        // Create anothe KStream instance that's a child node of the parent node. 
        KStream<String, String> upperCasedStream = simpleFirstStream.mapValues(v -> v.toUpperCase());

        // writes the transformed output to another topic (the sink node)
        upperCasedStream.to("out-topic", Produced.with(strSerde, strSerde));


        KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), strmConfig);

        kafkaStreams.start();
        try {
            Thread.sleep(35000);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        Log.info("Shutting down the Yelling APP Now");
        kafkaStreams.close();
    }
}
